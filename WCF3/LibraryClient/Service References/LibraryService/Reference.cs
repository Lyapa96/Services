//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LibraryClient.LibraryService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Book", Namespace="http://schemas.datacontract.org/2004/07/LibraryService")]
    [System.SerializableAttribute()]
    public partial class Book : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LibraryClient.LibraryService.BookType BookTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int YearField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Author {
            get {
                return this.AuthorField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorField, value) != true)) {
                    this.AuthorField = value;
                    this.RaisePropertyChanged("Author");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LibraryClient.LibraryService.BookType BookType {
            get {
                return this.BookTypeField;
            }
            set {
                if ((this.BookTypeField.Equals(value) != true)) {
                    this.BookTypeField = value;
                    this.RaisePropertyChanged("BookType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Year {
            get {
                return this.YearField;
            }
            set {
                if ((this.YearField.Equals(value) != true)) {
                    this.YearField = value;
                    this.RaisePropertyChanged("Year");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BookType", Namespace="http://schemas.datacontract.org/2004/07/LibraryService")]
    public enum BookType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Journal = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Encyclopedia = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Tale = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LibraryService.ILibraryService", CallbackContract=typeof(LibraryClient.LibraryService.ILibraryServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ILibraryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILibraryService/Present", ReplyAction="http://tempuri.org/ILibraryService/PresentResponse")]
        void Present(string firstName, string lastName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILibraryService/Present", ReplyAction="http://tempuri.org/ILibraryService/PresentResponse")]
        System.Threading.Tasks.Task PresentAsync(string firstName, string lastName);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ILibraryService/Add", ReplyAction="http://tempuri.org/ILibraryService/AddResponse")]
        void Add(LibraryClient.LibraryService.Book book);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ILibraryService/Add", ReplyAction="http://tempuri.org/ILibraryService/AddResponse")]
        System.Threading.Tasks.Task AddAsync(LibraryClient.LibraryService.Book book);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ILibraryService/Get", ReplyAction="http://tempuri.org/ILibraryService/GetResponse")]
        LibraryClient.LibraryService.Book Get(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ILibraryService/Get", ReplyAction="http://tempuri.org/ILibraryService/GetResponse")]
        System.Threading.Tasks.Task<LibraryClient.LibraryService.Book> GetAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ILibraryService/GetBooks", ReplyAction="http://tempuri.org/ILibraryService/GetBooksResponse")]
        LibraryClient.LibraryService.Book[] GetBooks(string author);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ILibraryService/GetBooks", ReplyAction="http://tempuri.org/ILibraryService/GetBooksResponse")]
        System.Threading.Tasks.Task<LibraryClient.LibraryService.Book[]> GetBooksAsync(string author);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ILibraryService/Take", ReplyAction="http://tempuri.org/ILibraryService/TakeResponse")]
        void Take(LibraryClient.LibraryService.Book book);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ILibraryService/Take", ReplyAction="http://tempuri.org/ILibraryService/TakeResponse")]
        System.Threading.Tasks.Task TakeAsync(LibraryClient.LibraryService.Book book);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ILibraryService/Return", ReplyAction="http://tempuri.org/ILibraryService/ReturnResponse")]
        void Return(LibraryClient.LibraryService.Book book);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ILibraryService/Return", ReplyAction="http://tempuri.org/ILibraryService/ReturnResponse")]
        System.Threading.Tasks.Task ReturnAsync(LibraryClient.LibraryService.Book book);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ILibraryService/GetBooksCount", ReplyAction="http://tempuri.org/ILibraryService/GetBooksCountResponse")]
        int GetBooksCount();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ILibraryService/GetBooksCount", ReplyAction="http://tempuri.org/ILibraryService/GetBooksCountResponse")]
        System.Threading.Tasks.Task<int> GetBooksCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/ILibraryService/ApplyСhanges", ReplyAction="http://tempuri.org/ILibraryService/ApplyСhangesResponse")]
        void ApplyСhanges();
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/ILibraryService/ApplyСhanges", ReplyAction="http://tempuri.org/ILibraryService/ApplyСhangesResponse")]
        System.Threading.Tasks.Task ApplyСhangesAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/ILibraryService/EscapeLibrary")]
        void EscapeLibrary();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/ILibraryService/EscapeLibrary")]
        System.Threading.Tasks.Task EscapeLibraryAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILibraryServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILibraryService/OnCallback")]
        void OnCallback();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILibraryServiceChannel : LibraryClient.LibraryService.ILibraryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LibraryServiceClient : System.ServiceModel.DuplexClientBase<LibraryClient.LibraryService.ILibraryService>, LibraryClient.LibraryService.ILibraryService {
        
        public LibraryServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LibraryServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LibraryServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LibraryServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LibraryServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Present(string firstName, string lastName) {
            base.Channel.Present(firstName, lastName);
        }
        
        public System.Threading.Tasks.Task PresentAsync(string firstName, string lastName) {
            return base.Channel.PresentAsync(firstName, lastName);
        }
        
        public void Add(LibraryClient.LibraryService.Book book) {
            base.Channel.Add(book);
        }
        
        public System.Threading.Tasks.Task AddAsync(LibraryClient.LibraryService.Book book) {
            return base.Channel.AddAsync(book);
        }
        
        public LibraryClient.LibraryService.Book Get(int id) {
            return base.Channel.Get(id);
        }
        
        public System.Threading.Tasks.Task<LibraryClient.LibraryService.Book> GetAsync(int id) {
            return base.Channel.GetAsync(id);
        }
        
        public LibraryClient.LibraryService.Book[] GetBooks(string author) {
            return base.Channel.GetBooks(author);
        }
        
        public System.Threading.Tasks.Task<LibraryClient.LibraryService.Book[]> GetBooksAsync(string author) {
            return base.Channel.GetBooksAsync(author);
        }
        
        public void Take(LibraryClient.LibraryService.Book book) {
            base.Channel.Take(book);
        }
        
        public System.Threading.Tasks.Task TakeAsync(LibraryClient.LibraryService.Book book) {
            return base.Channel.TakeAsync(book);
        }
        
        public void Return(LibraryClient.LibraryService.Book book) {
            base.Channel.Return(book);
        }
        
        public System.Threading.Tasks.Task ReturnAsync(LibraryClient.LibraryService.Book book) {
            return base.Channel.ReturnAsync(book);
        }
        
        public int GetBooksCount() {
            return base.Channel.GetBooksCount();
        }
        
        public System.Threading.Tasks.Task<int> GetBooksCountAsync() {
            return base.Channel.GetBooksCountAsync();
        }
        
        public void ApplyСhanges() {
            base.Channel.ApplyСhanges();
        }
        
        public System.Threading.Tasks.Task ApplyСhangesAsync() {
            return base.Channel.ApplyСhangesAsync();
        }
        
        public void EscapeLibrary() {
            base.Channel.EscapeLibrary();
        }
        
        public System.Threading.Tasks.Task EscapeLibraryAsync() {
            return base.Channel.EscapeLibraryAsync();
        }
    }
}
